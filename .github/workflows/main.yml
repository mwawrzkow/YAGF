name: main deploy

on: 
  push: 
    branches: [ main ]
  pull_request: 
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'

jobs:
  # check-commit-message:
  #   name: Check Commit Message
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'push' 
  #   steps:
  #     - name: Get PR Commits
  #       id: 'get-pr-commits'
  #       uses: tim-actions/get-pr-commits@master
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Check Subject Line Length
  #       uses: tim-actions/commit-message-checker-with-regex@v0.3.1
  #       with:
  #         commits: ${{ steps.get-pr-commits.outputs.commits }}
  #         pattern: '^.{0,1000}(\n.*)*$'
  #         error: 'Subject too long (max 1000)'

  #     - name: Check Body Line Length
  #       if: ${{ success() || failure() }}
  #       uses: tim-actions/commit-message-checker-with-regex@v0.3.1
  #       with:
  #         commits: ${{ steps.get-pr-commits.outputs.commits }}
  #         pattern: '^.+(\n.{0,1000})*$'
  #         error: 'Body line too long (max 1000)'

  #     - name: Check Fixes
  #       if: ${{ success() || failure() }}
  #       uses: tim-actions/commit-message-checker-with-regex@v0.3.1
  #       with:
  #         commits: ${{ steps.get-pr-commits.outputs.commits }}
  #         pattern: '\s*Fixes\s*:?\s*(#\d+|github\.com\/kata-containers\/[a-z-.]*#\d+)'
  #         error: 'No "Fixes" found'
  #         one_pass_all_pass: 'true'
  build: 
    strategy: 
      fail-fast: false
      matrix: 
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Build(${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps: 
      - uses: actions/checkout@v2 
      - name: install prerequestes 
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: | 
           sudo apt-get install cppcheck
           DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends tzdata
           export TZ="America/New_York" && export DEBIAN_FRONTEND="noninteractive" && sudo apt-get update && sudo apt install -y xorg-dev libglu1-mesa mesa-opencl-icd libgl1-mesa-dev xsltproc libglfw3-dev libglu1-mesa-dev xvfb libxinerama1 libxcursor1 graphviz doxygen
      - name: Run cppcheck and save results to file
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cppcheck . --xml 2>result.xml
      - name: Generate report folder
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: mkdir report
      - name: generate report
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cppcheck-htmlreport --file=result.xml --report-dir=report
      - name: compress report
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: tar -czvf result.tar.gz report/ 
      - name: Generate documentation
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |  
          doxygen       
          ls -la 
          tar -czvf html.tar.gz html/
          tar -czvf latex.tar.gz latex/
      - name: Update submodules
        run:  git submodule sync && git submodule update --init
      - name: Create 'build' directory
        run: mkdir build
      - name: run cmake configuration
        if: ${{ matrix.os != 'windows-latest' }}
        run: cd build && cmake .. 
      - name: run cmake windows configuration 
        if: ${{ matrix.os == 'windows-latest' }}
        run: cd build && cmake .. -G "MinGW Makefiles"  
      - name: Build binary 
        run: cd build && make
      - name: Upload to output Directory
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: mkdir output && mv result.tar.gz output/result.tar.gz &&  mv latex.tar.gz output/latex.tar.gz && mv html.tar.gz output/html.tar.gz
      - name: Archive code coverage results
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3          
        with:
          name: cppcheck-result
          path: output/result.tar.gz
      - name: Archive html documentation
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3          
        with:
          name: doc_html
          path: output/html.tar.gz
      - name: Archive latex documentation
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3          
        with:
          name: doc_latex
          path: output/latex.tar.gz
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        config-file: ./.github/codeql-config.yaml 
        queries: security-and-quality
        languages: ${{ matrix.language }}
    - run: |
        echo "Run, Build Application using script"
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends tzdata
        export TZ="America/New_York" && export DEBIAN_FRONTEND="noninteractive" && sudo apt-get update && sudo apt install -y xorg-dev libglu1-mesa mesa-opencl-icd libgl1-mesa-dev xsltproc libglfw3-dev libglu1-mesa-dev xvfb libxinerama1 libxcursor1 graphviz
        git submodule sync && git submodule update --init
        mkdir build && cd build && cmake .. && make 
    - run: | 
        rm -rf build/_deps/*
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
  # update-docs-on-branch: 
  #     runs-on: ubuntu-latest
  #     needs: build
  #     if: github.event_name != 'push' 
  #     steps: 
  #       - uses: actions/checkout@v2 
  #       - name: installing gh 
  #         run: sudo apt install gh
  #       - name: Checkout PR
  #         env:
  #           GITHUB_TOKEN: ${{ secrets.TOKEN }} 
  #         run: gh pr checkout ${{ github.event.pull_request.number }}
  #       - name: ensure that directories exists and are empty
  #         run: mkdir -p docs/html docs/latex/ docs/audit && rm -rf docs/html/* docs/latex/* docs/checks/* && ls -la
  #       - name: install dependencies
  #         run: sudo apt-get install doxygen-latex 
  #       - name: Download HTML docs
  #         uses: aochmann/actions-download-artifact@1.0.4
  #         with:
  #           name: doc_html
  #           latest: true
  #           path: docs/html/
  #       - name: Download Latex docs
  #         uses: aochmann/actions-download-artifact@1.0.4
  #         with:
  #           name: doc_latex
  #           latest: true
  #           path: docs/latex/
  #       - name: Download audit docs
  #         uses: aochmann/actions-download-artifact@1.0.4
  #         with:
  #           name: cppcheck-result
  #           latest: true
  #           path: docs/audit
  #       - name: unzip artifacts 
  #         run: cd docs/html/ && tar -xvzf html.tar.gz && rm html.tar.gz && cd ../.. && cd docs/latex/ && tar -xvzf latex.tar.gz && rm latex.tar.gz && cd ../..
  #       - name: build pdf
  #         run: cd docs/latex/latex/ && make
  #       - name: move pdf file to latex directory and remove sources
  #         run: mv docs/latex/latex/refman.pdf docs/latex/ && rm -rf docs/latex/latex
  #       - name: unzip audit 
  #         run: cd docs/audit/ && ls -la && tar -xvzf result.tar.gz && rm result.tar.gz && mv report/* . && rm -rf report/
  #       - name: Extract branch name
  #         shell: bash
  #         run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #         id: extract_branch
  #       - name: Commit files
  #         run: |
  #           git config --local user.email "marcin.wawrzkow@outlook.com"
  #           git config --local user.name "github-actions[bot]"
  #           git add docs
  #           git commit -m "Added docs" -a
  #           git push
  #         env: 
  #           GITHUB_TOKEN: ${{ secrets.TOKEN }} 
      
